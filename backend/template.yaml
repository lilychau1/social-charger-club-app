AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  social-charger-club

  Sample SAM Template for social-charger-club

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: "The environment for deployment"

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10

    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true

Resources:
  EVChargingUsersTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Sub "${Environment}-EVCharging_Users"
      AttributeDefinitions: 
        - AttributeName: userId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema: 
        - AttributeName: userId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  EVChargingProducersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-EVCharging_Producers"  # Uses Environment to differentiate between dev and prod
      AttributeDefinitions:
        - AttributeName: producerId
          AttributeType: S
      KeySchema:
        - AttributeName: producerId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  EVChargingConsumersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-EVCharging_Consumers"  # Uses Environment to differentiate between dev and prod
      AttributeDefinitions:
        - AttributeName: consumerId
          AttributeType: S
      KeySchema:
        - AttributeName: consumerId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  EVChargingChargingPointsTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Sub "${Environment}-EVCharging_ChargingPoints"
      AttributeDefinitions: 
        - AttributeName: oocpChargePointId
          AttributeType: S
        - AttributeName: chargingPointId
          AttributeType: S
        - AttributeName: producerId
          AttributeType: S
        - AttributeName: location
          AttributeType: S
      KeySchema: 
        - AttributeName: oocpChargePointId
          KeyType: HASH  # Set oocpChargePointId as the partition key (HASH)
      GlobalSecondaryIndexes:
        - IndexName: chargingPointIdIndex
          KeySchema:
            - AttributeName: chargingPointId
              KeyType: HASH  # GSI with chargingPointId as partition key
          Projection:
            ProjectionType: ALL
        - IndexName: ProducerIdIndex
          KeySchema:
            - AttributeName: producerId
              KeyType: HASH  # GSI with producerId as partition key
            - AttributeName: location
              KeyType: RANGE  # GSI with location as sort key
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  EVChargingChargingPointEventsTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Sub "${Environment}-EVCharging_ChargingPointEvents"
      AttributeDefinitions: 
        - AttributeName: eventId
          AttributeType: S
        - AttributeName: oocpChargePointId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema: 
        - AttributeName: eventId
          KeyType: HASH 
      GlobalSecondaryIndexes:
        - IndexName: oocpChargePointIdIndex
          KeySchema:
            - AttributeName: oocpChargePointId
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-HelloWorldFunction"
      CodeUri: hello_world/
      Handler: app.lambda_handler
      Runtime: python3.13
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /hello
            Method: get

  RegisterUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-RegisterUserFunction"
      CodeUri: register_user/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 10
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USERS_TABLE_NAME: !Ref EVChargingUsersTable
      Architectures:
        - x86_64
      Events:
        RegisterUser:
          Type: Api
          Properties:
            Path: /register-user
            Method: post
  StoreNewUserDetailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-StoreNewUserDetailsFunction"
      CodeUri: store_new_user_details/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 10
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref EVChargingUsersTable
          CONSUMERS_TABLE_NAME: !Ref EVChargingConsumersTable
          PRODUCERS_TABLE_NAME: !Ref EVChargingProducersTable
      Architectures:
        - x86_64
      Events:
        RegisterUser:
          Type: Api
          Properties:
            Path: /store-new-user-details
            Method: post

  StoreProducersChargingPointsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-StoreProducersChargingPoints"
      CodeUri: store_producers_charging_points/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 10
      Environment:
        Variables:
          CHARGING_POINTS_TABLE_NAME: !Ref EVChargingChargingPointsTable
      Architectures:
        - x86_64
      Events:
        RegisterUser:
          Type: Api
          Properties:
            Path: /store-producers-charging-points
            Method: post

  GetChargingPointsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-GetChargingPoints"
      CodeUri: get_charging_points/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 10
      Environment:
        Variables:
          CHARGING_POINTS_TABLE_NAME: !Ref EVChargingChargingPointsTable
      Architectures:
        - x86_64
      Events:
        RegisterUser:
          Type: Api
          Properties:
            Path: /get-charging-points
            Method: post

  IngestChargingPointAvailabilityIoTFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-IngestChargingPointAvailabilityIoT"
      CodeUri: ingest_charging_point_availability_iot/
      Handler: app.lambda_handler
      Runtime: python3.13
      Policies: 
        - DynamoDBCrudPolicy: 
            TableName: !Ref EVChargingChargingPointEventsTable
        - DynamoDBCrudPolicy: 
            TableName: !Ref EVChargingChargingPointsTable
        - Statement:
            - Effect: Allow
              Action: 
                - "iot:Publish"
              Resource: 
                - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/*"
      Environment:
        Variables:
          CHARGING_POINTS_TABLE_NAME: !Ref EVChargingChargingPointsTable
          CHARGING_POINT_EVENTS_TABLE_NAME: !Ref EVChargingChargingPointEventsTable
          IOT_ENDPOINT: !Ref IoTEndpoint

  IoTEndpoint: 
    Type: AWS::IoT::Thing
    Properties: 
      ThingName: !Sub "${Environment}-EVChargingPointGateway"

  ChargingPointWebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: ChargingPointWebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  WebSocketStage: 
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ChargingPointWebSocketApi
      StageName: prod
      AutoDeploy: true

  ConnectRoute: 
    Type: AWS::ApiGatewayV2::Route
    Properties: 
      ApiId: !Ref ChargingPointWebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref ConnectIntegration

  ConnectIntegration: 
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ChargingPointWebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IngestChargingPointAvailabilityIoTFunction.Arn}/invocations

  DisconnectRoute: 
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ChargingPointWebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref DisconnectIntegration
  
  DisconnectIntegration: 
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ChargingPointWebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IngestChargingPointAvailabilityIoTFunction.Arn}/invocations

  MessageRoute: 
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ChargingPointWebSocketApi
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: MessageRoute
      Target: !Join 
        - "/"
        - - "integrations"
          - !Ref MessageIntegration
          
  MessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ChargingPointWebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IngestChargingPointAvailabilityIoTFunction.Arn}/invocations

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${Environment}-EVChargingUserPool"  # Uses Environment to differentiate between dev and prod
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: preferred_username
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: userType
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: userId
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: consumerId
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: producerId
          AttributeDataType: String
          Mutable: true
          Required: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub "${Environment}-EVChargingUserPoolClient"
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      ReadAttributes:
        - email
        - preferred_username
        - custom:userType
        - custom:userId
        - custom:consumerId
        - custom:producerId
      WriteAttributes:
        - email
        - preferred_username
        - custom:userType
        - custom:userId
        - custom:consumerId
        - custom:producerId
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  social-charger-club

  Sample SAM Template for social-charger-club

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: "The environment for deployment"

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10

    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true

Resources:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Description: "API Gateway for EV Charging"
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'http://localhost:3000'"
  EVChargingUsersTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Sub "${Environment}-EVCharging_Users"
      AttributeDefinitions: 
        - AttributeName: userId
          AttributeType: S
        - AttributeName: consumerId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema: 
        - AttributeName: userId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: userIdEmailIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: email
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: consumerIdEmailIndex
          KeySchema:
            - AttributeName: consumerId
              KeyType: HASH
            - AttributeName: email
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  EVChargingProducersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-EVCharging_Producers"  # Uses Environment to differentiate between dev and prod
      AttributeDefinitions:
        - AttributeName: producerId
          AttributeType: S
      KeySchema:
        - AttributeName: producerId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  EVChargingConsumersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-EVCharging_Consumers"  # Uses Environment to differentiate between dev and prod
      AttributeDefinitions:
        - AttributeName: consumerId
          AttributeType: S
      KeySchema:
        - AttributeName: consumerId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  EVChargingChargingPointsTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Sub "${Environment}-EVCharging_ChargingPoints"
      AttributeDefinitions: 
        - AttributeName: oocpChargePointId
          AttributeType: S
        - AttributeName: chargingPointId
          AttributeType: S
        - AttributeName: producerId
          AttributeType: S
        - AttributeName: location
          AttributeType: S
      KeySchema: 
        - AttributeName: oocpChargePointId
          KeyType: HASH  # Set oocpChargePointId as the partition key (HASH)
      GlobalSecondaryIndexes:
        - IndexName: chargingPointIdIndex
          KeySchema:
            - AttributeName: chargingPointId
              KeyType: HASH  # GSI with chargingPointId as partition key
          Projection:
            ProjectionType: ALL
        - IndexName: ProducerIdIndex
          KeySchema:
            - AttributeName: producerId
              KeyType: HASH  # GSI with producerId as partition key
            - AttributeName: location
              KeyType: RANGE  # GSI with location as sort key
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  EVChargingChargingPointEventsTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Sub "${Environment}-EVCharging_ChargingPointEvents"
      AttributeDefinitions: 
        - AttributeName: eventId
          AttributeType: S
        - AttributeName: oocpChargePointId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema: 
        - AttributeName: eventId
          KeyType: HASH 
      GlobalSecondaryIndexes:
        - IndexName: oocpChargePointIdIndex
          KeySchema:
            - AttributeName: oocpChargePointId
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  EVChargingTransactionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-EVCharging_Transactions"
      AttributeDefinitions:
        - AttributeName: transactionId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
        - AttributeName: producerIdWithIsSuccessful
          AttributeType: S
        - AttributeName: consumerIdWithIsSuccessful
          AttributeType: S
        - AttributeName: chargingPointIdWithIsSuccessful
          AttributeType: S
      KeySchema:
        - AttributeName: transactionId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: consumerIdWithIsSuccessfulIndex
          KeySchema:
            - AttributeName: consumerIdWithIsSuccessful
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: producerIdWithIsSuccessfulIndex
          KeySchema:
            - AttributeName: producerIdWithIsSuccessful
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: chargingPointIdWithIsSuccessfulIndex
          KeySchema:
            - AttributeName: chargingPointIdWithIsSuccessful
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  EVChargingBookingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-EVCharging_Bookings"
      AttributeDefinitions:
        - AttributeName: bookingId
          AttributeType: S
        - AttributeName: oocpChargePointId
          AttributeType: S
        - AttributeName: consumerId
          AttributeType: S
        - AttributeName: startTime#endTime
          AttributeType: S
      KeySchema:
        - AttributeName: bookingId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: oocpChargePointId-startTime-endTime-Index
          KeySchema:
            - AttributeName: oocpChargePointId
              KeyType: HASH
            - AttributeName: startTime#endTime
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: consumerId-startTime-endTime-Index
          KeySchema:
            - AttributeName: consumerId
              KeyType: HASH
            - AttributeName: startTime#endTime
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  EVChargingMatchRequestsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-EVCharging_MatchRequests"
      AttributeDefinitions:
        - AttributeName: requestId
          AttributeType: S
        - AttributeName: senderConsumerId
          AttributeType: S
        - AttributeName: recipientConsumerId
          AttributeType: S
        - AttributeName: startTime#endTime
          AttributeType: S
        - AttributeName: matchStatus
          AttributeType: S
        - AttributeName: isRead
          AttributeType: N
      KeySchema:
        - AttributeName: requestId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: senderConsumerId-startTime-endTime-Index
          KeySchema:
            - AttributeName: senderConsumerId
              KeyType: HASH
            - AttributeName: startTime#endTime
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: recipientConsumerId-startTime-endTime-Index
          KeySchema:
            - AttributeName: recipientConsumerId
              KeyType: HASH
            - AttributeName: startTime#endTime
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: senderConsumerId-isRead-Index
          KeySchema:
            - AttributeName: senderConsumerId
              KeyType: HASH
            - AttributeName: isRead
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: recipientConsumerId-isRead-Index
          KeySchema:
            - AttributeName: recipientConsumerId
              KeyType: HASH
            - AttributeName: isRead
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: senderConsumerId-matchStatus-Index
          KeySchema:
            - AttributeName: senderConsumerId
              KeyType: HASH
            - AttributeName: matchStatus
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: recipientConsumerId-matchStatus-Index
          KeySchema:
            - AttributeName: recipientConsumerId
              KeyType: HASH
            - AttributeName: matchStatus
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  EVChargingConsumerPaymentInformationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-EVCharging_PaymentInformation"
      AttributeDefinitions:
        - AttributeName: paymentInfoId
          AttributeType: S
        - AttributeName: consumerId
          AttributeType: S
      KeySchema:
        - AttributeName: paymentInfoId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: consumerIdIndex
          KeySchema:
            - AttributeName: consumerId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-HelloWorldFunction"
      CodeUri: lambda_functions/hello_world/
      Handler: app.lambda_handler
      Runtime: python3.13
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /hello
            Method: get

  RegisterUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-RegisterUserFunction"
      CodeUri: lambda_functions/register_user/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EVChargingUsersTable
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USERS_TABLE_NAME: !Ref EVChargingUsersTable
      Architectures:
        - x86_64
      Events:
        RegisterUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /register-user
            Method: post

  ConfirmUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-ConfirmUserFunction"
      CodeUri: lambda_functions/confirm_user/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 10
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Architectures:
        - x86_64
      Events:
        RegisterUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /confirm-user
            Method: post

  ResendConfirmationCodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-ResendConfirmationCodeFunction"
      CodeUri: lambda_functions/resend_confirmation_code/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 10
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Architectures:
        - x86_64
      Events:
        ResendConfirmationCode:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /resend-confirmation-code
            Method: post

  SignInFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-SignInFunction"
      CodeUri: lambda_functions/sign_in/
      Handler: app.lambda_handler
      Runtime: python3.8
      Timeout: 10
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminInitiateAuth
                - cognito-idp:AdminGetUser
              Resource: !GetAtt UserPool.Arn
      Architectures:
        - x86_64
      Events:
        SignIn:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /sign-in
            Method: post

  StoreNewUserDetailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-StoreNewUserDetailsFunction"
      CodeUri: lambda_functions/store_new_user_details/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 10
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:Query
              Resource:
                - !GetAtt EVChargingUsersTable.Arn
                - !GetAtt EVChargingConsumersTable.Arn
                - !GetAtt EVChargingProducersTable.Arn
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref EVChargingUsersTable
          CONSUMERS_TABLE_NAME: !Ref EVChargingConsumersTable
          PRODUCERS_TABLE_NAME: !Ref EVChargingProducersTable
      Architectures:
        - x86_64
      Events:
        RegisterUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /store-new-user-details
            Method: post

  StoreProducersChargingPointsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-StoreProducersChargingPoints"
      CodeUri: lambda_functions/store_producers_charging_points/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 10
      Environment:
        Variables:
          CHARGING_POINTS_TABLE_NAME: !Ref EVChargingChargingPointsTable
      Architectures:
        - x86_64
      Events:
        RegisterUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /store-producers-charging-points
            Method: post

  GetChargingPointsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-GetChargingPoints"
      CodeUri: lambda_functions/get_charging_points/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 10
      Environment:
        Variables:
          CHARGING_POINTS_TABLE_NAME: !Ref EVChargingChargingPointsTable
      Architectures:
        - x86_64
      Events:
        RegisterUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /get-charging-points
            Method: post

  IngestChargingPointAvailabilityIoTFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-IngestChargingPointAvailabilityIoT"
      CodeUri: lambda_functions/ingest_charging_point_availability_iot/
      Handler: app.lambda_handler
      Runtime: python3.13
      Policies: 
        - DynamoDBCrudPolicy: 
            TableName: !Ref EVChargingChargingPointEventsTable
        - DynamoDBCrudPolicy: 
            TableName: !Ref EVChargingChargingPointsTable
      Environment:
        Variables:
          CHARGING_POINTS_TABLE_NAME: !Ref EVChargingChargingPointsTable
          CHARGING_POINT_EVENTS_TABLE_NAME: !Ref EVChargingChargingPointEventsTable
      Events:
        MQTTEvent:
          Type: IoTRule
          Properties:
            AwsIotSqlVersion: "2016-03-23"
            Sql: "SELECT * FROM 'charging_points/availability'"

  BookChargingPointFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-BookChargingPoint"
      CodeUri: lambda_functions/book_charging_point/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 10
      Environment:
        Variables:
          CHARGING_POINTS_TABLE_NAME: !Ref EVChargingChargingPointsTable
          BOOKINGS_TABLE_NAME: !Ref EVChargingBookingsTable
          PARAMETER_PREFIX: !Sub "${Environment}-" 
          SECRET_NAME: !Ref EVChargingSecrets
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: '*'
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'secretsmanager:GetSecretValue'
              Resource: !Ref EVChargingSecrets
      Architectures:
        - x86_64
      Events:
        RegisterUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /book-charging-point
            Method: post

  ProcessPaymentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-ProcessPayment"
      CodeUri: lambda_functions/process_payment/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 10
      Environment:
        Variables:
          PRODUCERS_TABLE_NAME: !Ref EVChargingProducersTable
          TRANSACTIONS_TABLE_NAME: !Ref EVChargingTransactionsTable
          PAYMENT_INFO_TABLE_NAME: !Ref EVChargingConsumerPaymentInformationTable
          SECRET_NAME: !Ref EVChargingSecrets 
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: '*'
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'secretsmanager:GetSecretValue'
              Resource: !Ref EVChargingSecrets
      Architectures:
        - x86_64
      Events:
        RegisterUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /process-payment
            Method: post

  RequestMatchFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-RequestMatch"
      CodeUri: lambda_functions/book_charging_point/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 10
      Environment:
        Variables:
          MATCH_REQUESTS_TABLE_NAME: !Ref EVChargingMatchRequestsTable
          USERS_TABLE_NAME: !Ref EVChargingUsersTable
          PARAMETER_PREFIX: !Sub "${Environment}-"
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: '*'
      Architectures:
        - x86_64
      Events:
        RegisterUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /request-match
            Method: post

  HandleMatchRequestResponseFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-HandleMatchRequestResponse"
      CodeUri: lambda_functions/book_charging_point/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 10
      Environment:
        Variables:
          MATCH_REQUESTS_TABLE_NAME: !Ref EVChargingMatchRequestsTable
          USERS_TABLE_NAME: !Ref EVChargingUsersTable
          PARAMETER_PREFIX: !Sub "${Environment}-"
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: '*'
      Architectures:
        - x86_64
      Events:
        RegisterUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /handle-match-request-response
            Method: post
  IoTPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: !Sub "${Environment}-EVChargingIoTPolicy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - iot:Connect
              - iot:Subscribe
              - iot:Publish
              - iot:Receive
            Resource: !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:*"

  IoTThing:
    Type: AWS::IoT::Thing
    Properties:
      ThingName: !Sub "${Environment}-EVChargingThing"

  IoTTopicRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: !Sub "${Environment}_ChargingPointUpdates"
      TopicRulePayload:
        Sql: "SELECT * FROM 'charging_points/updates'"
        Actions:
          - DynamoDBv2:
              PutItem:
                TableName: !Ref EVChargingChargingPointEventsTable
              RoleArn: !GetAtt IoTRole.Arn
        AwsIotSqlVersion: "2016-03-23"

  IoTRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-IoTRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "iot.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub "${Environment}-IoTPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${EVChargingChargingPointEventsTable}"

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${Environment}-EVChargingUserPool"  # Uses Environment to differentiate between dev and prod
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: preferred_username
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: userType
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: userId
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: consumerId
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: producerId
          AttributeDataType: String
          Mutable: true
          Required: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub "${Environment}-EVChargingUserPoolClient"
      GenerateSecret: false
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
      ReadAttributes:
        - email
        - preferred_username
        - custom:userType
        - custom:userId
        - custom:consumerId
        - custom:producerId
      WriteAttributes:
        - email
        - preferred_username
        - custom:userType
        - custom:userId
        - custom:consumerId
        - custom:producerId
  
  EVChargingSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${Environment}-EVChargingSecrets"
      Description: "API Key for external API service"
      SecretString: !Sub |
        {
          "VIRTA_API_KEY": "virta-api-key", 
          "EVBOX_API_KEY": "evbox-api-key", 
          "STRIPE_API_KEY": "mock-stripe-api-key"
        }

  VirtaApiGatewayUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${Environment}-VIRTA_API_GATEWAY_URL"
      Description: "API Gateway URL for Virta"
      Type: String
      Value: "https://mock-api-gateway.virta.com"
  
  VirtaResourceIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${Environment}-VIRTA_RESOURCE_ID"
      Description: "Virta resource ID"
      Type: String
      Value: "test-virta-resource-id"

  SESEmailParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${Environment}-SES_EMAIL"
      Description: "SES email"
      Type: String
      Value: "<Change to your test email>"